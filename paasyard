#!/bin/bash
set -eo pipefail

readonly YARD_VERSION="0.2"
readonly NAME="stfnklb/yard"
TAG="${PWD##*/}"

# TODO check if vendor is supported
# TODO supply an option to deploy to all at once
readonly vendors=(bluemix cloudcontrol dotcloud elasticbeanstalk engineyard heroku openshift pivotal)

clean() {
  # terminated containers
  docker rm $(docker ps -aq -f "status=exited") &> /dev/null || true
  # untagged images
  docker rmi $(docker images -af "dangling=true" -q) &> /dev/null || true
}

receive() {
  # Place the app inside the container
  ID=$(cat | docker run -i -a stdin "$NAME":base /bin/bash -c "mkdir -p /yard/app && tar -xC /yard/app")
  test $(docker wait $ID) -eq 0
  docker commit "$ID" "$NAME":"$TAG" > /dev/null
  clean
}

# remote repo
clone() {
  local temp=$(mktemp -d)
  git clone "$remote" "$temp"
  # TAG name
  TAG=$(basename "$remote" ".git")
  tar cC "$temp" . | receive
  rm -rf "$temp"
}

contains() {
  local e
  for e in "${@:2}"; do [[ "$e" == "$1" ]] && return 0; done
  return 1
}

usage() {
  echo "Usage: paasyard COMMAND VENDOR [OPTIONS]"
  echo ""
  echo "COMMANDS:"
  echo "  create    # deploy application to vendor"
  echo "  push      # update to a new version"
  echo "  delete    # delete application"
  echo "  set-env   # set an env variable"
  echo "  list      # list available vendors"
  echo "  clean     # clean up docker images"
  echo ""
  echo "OPTIONS:"
  echo "  -a APPNAME # (optional) desired name of the deployment"
  echo "  -r REMOTE  # (optional) app source remote git repository"
}

main() {
  declare cmd="$1" vendor="$2"
  declare appname="${PWD##*/}" remote env_var

  # parameter checks
  if [[ -z $cmd ]]; then
    echo "This script requires a command!" >&2
    usage
    exit 1
  fi
  
  # clean up app images
  if [[ "$cmd" == "clean" ]]; then
    echo "Removing app images..."
    docker images | grep -P 'stfnklb/yard\s*?(?!.*base)' | awk '{print $3}' | xargs docker rmi &> /dev/null || true
    exit 0
  fi

  # list vendors
  if [[ "$cmd" == "list" ]]; then
    printf '  %s\n' "${vendors[@]}"
    exit 0
  fi

  if [[ -z $vendor ]]; then
    echo "This script requires a vendor!" >&2
    usage
    exit 1
  elif ! contains "$vendor" "${vendors[@]}"; then
    echo "Vendor ${vendor^} is not supported!" >&2
    echo "${vendors[@]}" >&2
    exit 1
  fi
  
  # shift arguments
  shift 2

  # optional third operand
  if [[ "$cmd" == "set-env" ]]; then
    env_var="$1"; shift
  fi

  # options
  local OPTIND opt a r
  while getopts ":a:r:vh" opt; do
    case $opt in  
      a)
        appname="$OPTARG"
        ;;
      r)
        remote="$OPTARG"
        ;;
      v)
        echo "YARD_VERSION="$YARD_VERSION""
        exit 0
        ;;
      h)
        usage
        exit 0
        ;;
      \?)
        echo "Invalid option: -"$OPTARG"" >&2
        usage
        exit 1
        ;;
      :)
        echo "Option -"$OPTARG" requires an argument." >&2
        usage
        exit 1
        ;;
    esac
  done

  # commands
  case $cmd in
    push)
      if [[ -n $remote ]]; then
        clone
      else
        # app folder
        tar cC "${PWD}" . | receive
      fi

      echo "-----> Pushing app to ${vendor^}..." >&1
      docker run --rm "$NAME":"$TAG" /yard/deploy update "$vendor" "$appname"
      ;;
    create)
      if [[ -n $remote ]]; then
        clone
      else
        # app folder
        tar cC "${PWD}" . | receive
      fi

      echo "-----> Creating app on ${vendor^}..." >&1
      docker run --rm "$NAME":"$TAG" /yard/deploy deploy "$vendor" "$appname"
      ;;
    delete)
      echo "-----> Deleting app on ${vendor^}..." >&1
      if [[ -n $remote ]]; then
        TAG=$(basename "$remote" ".git")
      fi
      docker run --rm "$NAME":"$TAG" /yard/deploy delete "$vendor" "$appname"
      ;;
    set-env)
      echo "-----> Configuring app on ${vendor^}..." >&1
      echo "Sorry, this is not implemented yet. Please use the .env file for now!"
      ;;
    *)
      usage
      ;;
  esac
}

main "$@"

