#!/bin/bash
set -eo pipefail

_DIR_="$(dirname "$0")"
cd $_DIR_

# global configuration
while read -r line; do
  export "$line"
done < config/provider.cfg

# create deployment
# expect app inside app/
# vendor deployment into /temp
# copy necessary files from vendor pack
# this is basically on demand what the init.sh script does in v1
pre_deploy() {
  echo "-----> Preparing app for ${1^} deployment..."
  # defensiv clean up
  rm -rf current
  mkdir -p current
  # TODO git should be copied 1-1 atm file modes or anything are changed and recomitted later?
  cp -r app/. current
  # TODO check if this is a git repo already, else make it one!
  # copy artifacts
  # deployment artifacts (optional)
  cp -r provider/${1,,}/files/. current 2> /dev/null || true
  cd current
  # TODO deployment from non master branch fails on HK, CC
  if [[ "$(git symbolic-ref --short -q HEAD)" != "master" ]]; then
    echo "Deployment from non-master branch is not supported!"
    echo "Checkout master branch first."
    exit 1
  fi
  git add --all
  git commit -m "Deployment artifacts" || true
  cd ..
  # TODO all those artifacts are not good if deployment is not Git based
  # would also be possible to run a cd app inside the scripts from a parent folder?!
  # deployment scripts
  cp provider/${1,,}/* current
  # helper scripts
  cp -r helpers/. current
}

# deletes deployment artifacts
post_deploy() {
  echo "-----> Cleaning up..."
  rm -rf current
}

main() {
  local cmd="$1"; shift
  local vendor="$1"; shift
  local appname="$1"; shift
  local params="$@"
  
  # no appname? create one!
  export APPNAME=${appname:="$(ruby randname.rb)"}

  # bootstrap deployment
  pre_deploy "$vendor"

  # run script
  ./current/"$cmd" "$params"

  # cleanup after deployment
  post_deploy
}

main "$@"

